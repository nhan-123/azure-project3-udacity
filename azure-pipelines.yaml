# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  webAppName: 'Webappk-AppService'

stages:

#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
# - stage: Build
#   jobs:
#   - job: BuildInfrastructure
#     steps:
#     # Install Terraform on the pipeline agent 
#     # - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#     #   displayName: install terraform
#     #   inputs:
#     #     terraformVersion: latest
#     - task: TerraformInstaller@0
#       inputs:
#         terraformVersion: 'latest'
    
#     # Run Terraform Init on the pipeline agent 
#     # Run Terraform Init on the pipeline agent 
#     # ToDo: Replace the resource group name, storage account name, and container name below
#     - task: TerraformCLI@0
#       displayName: 'Terrafom init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         backendServiceArm: '$(azureServiceConnectionId)'
#         backendAzureRmResourceGroupName: 'Azuredevops'
#         backendAzureRmStorageAccountName: 'storage209796'
#         backendAzureRmContainerName: 'mycontainer209796'
#         backendAzureRmKey: '+BGYC5BeG0HAHeOsf5JNUcJuD51hZBIx7AJzqqOMfEL7aEGVeQp8YkD0wOa5oXaH77ef0bM97DU4+AStF/YjJw=='

#     # # # Run Terraform Validate    
#     - task: TerraformCLI@0
#       displayName: Terraform validate
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'

    
#     # # Run Terraform Apply
#     # #ToDo: Change the workingDirectory path, as applicable to you
#     - task: TerraformCLI@0
#       displayName: Terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#     Destroy the resources in Azure
#     ToDo: Change the workingDirectory path, as applicable to you
#     - task: TerraformCLI@0
#       displayName: Terraform destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'    

# - stage: BuildFakeRestAPI
#   jobs:
#   - job: 'BuildFakeapp'
#     displayName: 'Build Fake app Rest API'
#     pool:
#       name: myAgentPool
#       vmImage: 'ubuntu-18.04'
#     steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: fakerestapi

# - stage: DeployFakeApp
#   dependsOn: BuildFakeRestAPI
#   condition: succeeded()
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#       name: myAgentPool
#     environment: 'DEV'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: $(azureServiceConnectionId) 
#               appName: $(webAppName)
#               appType: Webappk
#               package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip


####################################################################
#                       Build Test   zip                           #
####################################################################
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
      name: 'myAgentPool'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip
      displayName: 'Upload Selenium Tests'
      artifact: selenium

#     - task: ArchiveFiles@2
#       displayName: 'Archive Postman tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
#       displayName: 'Upload Postman Tests'
#       artifact: postman

#     - task: ArchiveFiles@2
#       displayName: 'Archive Jmeter tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
#       displayName: 'Upload JMeter Tests'
#       artifact: jmeter

# ####################################################################
# #                            Run Test                              #
# ####################################################################
- stage: RunTests     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    environment:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: selenium 
          ####################################################################
          #                       Selenium Test                              #
          ####################################################################
          - task: Bash@3
            displayName: 'Install Selenium'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                sudo python3 -m pip install --upgrade pip
                sudo pip3 install selenium==3.141.0 
                export PATH=$PATH:/usr/lib/chromium-browser/
                cd $(Pipeline.Workspace)/selenium
                unzip -o $(Pipeline.Workspace)/selenium/$(Build.BuildId)-selenium-tests -d .
          - bash: |
              cd $(Pipeline.Workspace)/s/automatedtesting/selenium
              rm -rf seleniumtestrun.log
              pwd
              python3 login.py
              ls -lah
              sudo cat seleniumtestrun.log
              sudo cp seleniumtestrun.log /var/log/selenium/
            displayName: Run Selenium Test-Suite
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Result logs
            inputs:
              targetPath: '$(Pipeline.Workspace)/selenium/seleniumtestrun.log'
              artifactName: 'SeleniumTestResult'
#           # ####################################################################
#           # #                       Postman  Test                              #
#           # ####################################################################
#           - download: current
#             displayName: Download postman
#             artifact: postman
#           - task: NodeTool@0
#             displayName: Install Node v16.X
#             inputs:
#               versionSpec: '16.x'
#           - task: Bash@3
#             displayName: 'Install newman'
#             inputs:
#               targetType: 'inline'
#               script: |
#                 sudo apt install nodejs npm -y
#                 nodejs --version
#                 npm install -g newman
#                 cd $(Pipeline.Workspace)/postman
#                 unzip -o $(Pipeline.Workspace)/postman/$(Build.BuildId)-postman-tests -d .
#           - bash: |
#               newman run /home/devopsagent/myagent/_work/2/postman/Validation_Tests.postman_collection.json \
#                         -e /home/devopsagent/myagent/_work/2/postman/Validation_Tests_Environment.postman_environment.json \
#                         --reporters cli,junit \
#                         --reporter-junit-export log/newman/validationTestReport.xml \
#                         --suppress-exit-code
#             displayName: Validation Test (http://dummy.restapiexample.com)

#           - bash: |
#               newman run /home/devopsagent/myagent/_work/2/postman/Regression_Tests.postman_collection.json \
#                      -e /home/devopsagent/myagent/_work/2/postman/Regression_Tests_Environment.postman_environment.json \
#                      --reporters cli,junit \
#                      --reporter-junit-export log/newman/regressionTestReport.xml \
#                      --suppress-exit-code
#             displayName: Regression Test (http://dummy.restapiexample.com)
          
#           - bash: |
#               newman run /home/devopsagent/myagent/_work/2/postman/Validation_Tests_2.postman_collection.json \
#                         -e /home/devopsagent/myagent/_work/2/postman/Validation_Tests_Environment_2.postman_environment.json \
#                         --reporters cli,junit \
#                         --reporter-junit-export log/newman/validationTestReport_2.xml \
#                         --suppress-exit-code
#             displayName: Validation Test (https://jsonmonk.com/api/v1/users)

#           - bash: |
#               newman run /home/devopsagent/myagent/_work/2/postman/Regression_Tests_2.postman_collection.json \
#                      -e /home/devopsagent/myagent/_work/2/postman/Regression_Tests_Environment_2.postman_environment.json \
#                      --reporters cli,junit \
#                      --reporter-junit-export log/newman/regressionTestReport_2.xml \
#                      --suppress-exit-code
#             displayName: Regression Test (https://jsonmonk.com/api/v1/users)

#           - task: PublishPipelineArtifact@1
#             displayName: Publish Regression and Validation Test Reports as Artifacts
#             inputs:
#               targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
#               artifactName: 'drop-integration-test'
#           - task: PublishTestResults@2
#             displayName: Publish Validation Test Reports (http://dummy.restapiexample.com)
#             condition: always()
#             inputs:
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/validationTestReport.xml'
#               mergeTestResults: true
#               testRunTitle: 'Validation Test Reports (http://dummy.restapiexample.com)'
#           - task: PublishTestResults@2
#             displayName: Publish Regression Test Reports (http://dummy.restapiexample.com)
#             condition: always()
#             inputs:
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/regressionTestReport.xml'
#               mergeTestResults: true
#               testRunTitle: 'Regression Test Reports (http://dummy.restapiexample.com)'
#           - task: PublishTestResults@2
#             displayName: Publish Validation Test Reports (https://jsonmonk.com/api/v1/users)
#             condition: always()
#             inputs:
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/validationTestReport_2.xml'
#               mergeTestResults: true
#               testRunTitle: 'Validation Test Reports (https://jsonmonk.com/api/v1/users)'
#           - task: PublishTestResults@2
#             displayName: Publish Regression Test Reports (https://jsonmonk.com/api/v1/users)
#             condition: always()
#             inputs:
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/regressionTestReport_2.xml'
#               mergeTestResults: true
#               testRunTitle: 'Regression Test Reports (https://jsonmonk.com/api/v1/users)'

#           ####################################################################
#           #                       JMeter   Test                              #
#           ####################################################################
#           - download: current
#             displayName: Download JMeter
#             artifact: jmeter
#           - task: Bash@3
#             displayName: Install JMeter
#             inputs:
#               targetType: 'inline'
#               script: |
#                 sudo apt-get install openjdk-11-jre-headless -y
#                 wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
#                 tar -xzvf jmeter.tgz

#                 cd $(Pipeline.Workspace)/jmeter
#                 unzip -o $(Pipeline.Workspace)/jmeter/$(Build.BuildId)-jmeter-tests -d .
          
#           - task: Bash@3
#             displayName: Run JMeter tests
#             inputs:
#               targetType: 'inline'
#               script: |
#                 apache-jmeter-5.4.1/bin/jmeter -n -t /home/devopsagent/myagent/_work/2/jmeter/endurance.jmx \
#                   -l /home/devopsagent/myagent/_work/2/jmeter/cicd-endurance-results.csv \
#                   -e -f -o /home/devopsagent/myagent/_work/2/jmeter/cicd-endurance-test-report.html \
#                   -j /home/devopsagent/myagent/_work/2/jmeter/cicd-endurance-test.log
                


  