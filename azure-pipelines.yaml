

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  webAppName: 'Webapp1-AppService'

stages:
#----------------------------------------
#pipline cua Minh
#-----------------------------------------
# - stage: Prepare
#   displayName: Prepare environment 
#   jobs: 
#   - deployment: deploy_terraform
#     continueOnError: false
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - checkout: self

#             ######### Step 1: Install Terraform ##########
#             - task: Bash@3
#               displayName: install zip
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   sudo apt-get -y install zip

#             - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#               displayName: install terraform
#               inputs:
#                 terraformVersion: latest   

#             - task: Bash@3
#               displayName: init terraform
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   cd terraform
#                   terraform init

#           ######### Step 2: Initialise workspace using terraform init ##########
            
#             # - task: TerraformCLI@0
#             #   inputs:
#             #     command: 'plan'
#             #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#             #     allowTelemetryCollection: true

#             ######### Step 3: Deploy Webapp terraform apply ##########
#             - task: Bash@3
#               displayName: apply terraform
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   cd terraform
#                   terraform apply -auto-approve


# # ####################################################################
# # #                       Build Fake App                             #
# # ####################################################################

# - stage: BuildFakeRestAPI
#   jobs:
#   - job: 'BuildFakeapp'
#     displayName: 'Build Fake app Rest API'
#     pool:
#       name: myAgentPool
#       vmImage: 'ubuntu-18.04'
#     steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: fakerestapi

# # ####################################################################
# # #                       Deploy Fake App                            #
# # ####################################################################
# - stage: DeployFakeApp
#   dependsOn: BuildFakeRestAPI
#   condition: succeeded()
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#       name: myAgentPool
#     environment: 'DEV'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               appType: webApp
#               package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip
#----------------------------------------
#pipline cua Minh
#-----------------------------------------


#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    # - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    #   displayName: install terraform
    #   inputs:
    #     terraformVersion: latest
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformCLI@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'storage209796'
        backendAzureRmContainerName: 'mycontainer209796'
        backendAzureRmKey: '+BGYC5BeG0HAHeOsf5JNUcJuD51hZBIx7AJzqqOMfEL7aEGVeQp8YkD0wOa5oXaH77ef0bM97DU4+AStF/YjJw=='

    # # # Run Terraform Validate    
    - task: TerraformCLI@0
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # # Run Terraform Apply
    # #ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Destroy the resources in Azure
    #ToDo: Change the workingDirectory path, as applicable to you
    # - task: TerraformCLI@0
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'    

- stage: BuildFakeRestAPI
  jobs:
  - job: 'BuildFakeapp'
    displayName: 'Build Fake app Rest API'
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: fakerestapi

- stage: DeployFakeApp
  dependsOn: BuildFakeRestAPI
  condition: succeeded()
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
      name: myAgentPool
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId) 
              appName: $(webAppName)
              appType: Webapp1
              package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip
#--------------------------------------------#    
    # # Postman - Install Newman    
    # # ToDo: Update the command and verify the working directory
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #   # ToDo: Write your commands to install newman
    #     script: |
    #       sudo apt install nodejs npm -y
    #       nodejs --version
    #       npm install -g newman
    #       cd $(Pipeline.Workspace)/postman
    #       unzip -o $(Pipeline.Workspace)/postman/$(Build.BuildId)-postman-tests -d .        
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    # # Postman Data Validation Test Suite    
    # # ToDo: Verify the working directory and the newman scripts
    # - task: CmdLine@2
    #   displayName: Run Data Validation Tests
    #   continueOnError: true
    #   inputs:
    #     script: |
    #       newman run /home/myagent/myagent/_work/1/postman/P3_Validation_Tests.postman_collection.json \
    #                 -e /home/myagent/myagent/_work/1/postman/P3_Validation_Tests_Environment.postman_environment.json \
    #                 --reporters cli,junit \
    #                 --reporter-junit-export log/newman/validationTestReport.xml \
    #                 --suppress-exit-code
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # # Postman Regression Test Suite    
    # # ToDo: Update the command and verify the working directory
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script:           # ToDo: Write your commands
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # # Postman - Publish Results 
    # # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/TEST-*.xml'
    #     searchFolder:       # ToDo
    #     mergeTestResults: true
    #     testRunTitle:       # ToDo

#     #--------------------------------------------#
#     # Selenium (UI) Test Suite - Archive the package  
#     # "ArchiveFiles@2" picks up the web package and archives it.
#     - task: ArchiveFiles@2
#       displayName: 'Archive UI Tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
#     # Selenium Test Suite - Publish the package  
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
#       displayName: 'Upload Package'
#       artifact: drop-uitests

#     #--------------------------------------------#    
#     # FakeRestAPI - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 
#         includeRootFolder:
#         archiveType: 
#         archiveFile: 
#     # FakeRestAPI - Publish    
#     - publish: 
#       displayName: 
#       artifact: 

#     #--------------------------------------------#  
#     # JMeter (Performance) Test Suite - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive PerformanceTestSuite'
#       inputs:
#         rootFolderOrFile: 
#         includeRootFolder:
#         archiveType: 
#         archiveFile: 
#     # JMeter Test Suite - Publish    
#     - publish: 
#       displayName: 
#       artifact: 

# #--------------------------------------------#  
# # DEPLOYMENT STAGE
# #--------------------------------------------#    
# - stage: Deploy
#   jobs:
#   #--------------------------------------------#  
#   # Deploy FakeRestAPI Web App
#   # ToDo: Provide <environment name> you created in your DevOps project
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-18.04'      
#     environment: <environment name>   # ToDo
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription:      # ToDo
#               appName:                # ToDo
#               appType: webApp
#               package: $(Pipeline.Workspace)/<artifact>/<archiveFile>       # ToDo: Use the published zip artifact. 
#           #--------------------------------------------#    
#           # Run JMeter test suite against the App Service
#           # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.  
#           # ToDo: Generate the log file. 
#           - task: CmdLine@2
#             inputs:
#               script: |
#                                                                             # ToDo: Write your commands
#               workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
#   #--------------------------------------------#  
#   # Selenium | Functional UI Tests
#   # ToDo: 
#   - deployment: VMDeploy
#     displayName: Selenium Tests
#     environment:
#       name:         # ToDo: Change/provide a name
#       resourceType: VirtualMachine
#       tags: selenium
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop-ui-tests     # ToDo: Change/provide a name
            
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |           
#                 # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 pip3 install selenium
                
#                 #  ToDo: Add chromedriver executable to path
#                 export PATH=$PATH:/path/to/chromedriver     
                
#                 # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
#                 # ToDo: Direct the output of the Selenium Test Suite to a log file
                
